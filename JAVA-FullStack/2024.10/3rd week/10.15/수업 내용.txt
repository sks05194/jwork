2교시
10:45
	RequestMapping을 여러 url로 접근하는 방법
	@RequestMapping(value={ "url1", "url2" })

11:05
	@ModelAttribute UserVO vo
	=> request.ModelAndView mav = new ModelAndView();
	=> mav.addObject("key명", 값)
	= request.setAttribute("key명", 값);

11:15
	컨트롤러 객체 내의 선언된 메소드 위에 기술되어 있는 @ModelAttribute("")의 기능

	형식:
	@ModelAttribute("객체명")
	메소드 선언문() { /* Do Somethings... */ return 값; }

	=> 해당 Controller 안의 url이 호출될 때마다 먼저 request.setAttribute("conditionMap", 해당 메소드가 반환하는 return값); 객체를 생성해서 request에 전달함.

3교시
11:35
	@SessionAttributes("객체명")
	session 객체에 setAttribute를 설정하는 어노테이션
	객체명은 반드시 model 객체를 통해 setAttribute 설정이 되어있는 객체명과 동일해야함.
	@ModelAttribute를 감시하는 역할, 동기화 처리되는 역할

	@SessionAttributes("board")
	=> 1번,
	@RequestMapping(value = "/updateBoard.do")
	public String updateBoard 의 매개변수 @ModelAttribute("board") BoardVO vo

	=> 2번,
	@RequestMapping(value = "/getBoard.do")
	model.addAttribute("board", boardService.getBoard(vo));

	@SessionAttributes 조건
	1. 반드시 @ModelAttribute 어노테이션이 아닌 Model 객체를 통해 데이터를 먼저 만들어 두어야 한다.
	- ModelAndView: 모델앤뷰객체명.addObject("속성명", 속성값);
	- Model: 모델객체명.addAttribute("속성명", 속성값);
	= request: request.setAttribute("속성명", 속성값);
	2. 1번에 설정한 attribute의 속성명(key명)과 동일한 객체명으로 지정해주어야 한다.