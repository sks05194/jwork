1교시
09:40
	클래스 생성(.java => src/main/java) => 객체 생성(bean => <bean>태그) => 빈 설정 파일(Spring Bean Configuration File) (.xml => src/main/resources)

09:55
	스프링 빈 설정 파일에서 객체를 생성하는 방법(bean태그 이용)

	bean 태그의 속성
	id => 객체명을 기술(자바의 식별자 명명규칙을 그대로 적용=권장)
	되도록 영어 소문자로 시작.
	카멜 기법이나 스네이크 기법(카멜 기법 권장)
	특수문자는 _, $만 사용 가능
	공백이 올 수 없다.
	첫 글자는 숫자를 사용할 수 없다.

	name => 객체명을 기술(자바의 식별자 명명규칙을 따르지 않는다.)
	조금 더 유연한 이름으로 사용가능(특수문자 기호들을 좀 더 유연하게 사용가능하다.)

	class 속성 => 객체의 자료형(데이터 타입)을 기술

	scope 속성 => singleton(기본값=default), prototype
	singleton => 객체를 한 개만 생성하도록 강제하는 패턴
	prototype => 객체를 요청할 때마다 new로 새롭게 생성하도록 하는 패턴

	lazy-init 속성 => true, false(기본값)
	객체를 생성하는 시점을 정의하는 속성
	true(게으른 로딩: lazy-loading) => 객체를 요청할 때 생성함(속도 느림, 메모리 부하가 적음)
	false(즉시 로딩: pre-loading) => 미리 객체를 생성해 놓음.(속도 빠름, 메모리 부하가 많음)

2교시
10:40
	GenericXmlApplicationContext
	xml 기반의 스프링 컨테이너를 구동시키는 기능을 하는 클래스
	기본 경로: src/main/resources/(classpath:) 폴더 경로까지 자동으로 가지고 있음.

10:45
	스프링 컨테이너(xml)
	객체들:
	1. ltv => (자료형: Lg, TV), prototype, 게으른 로딩(준비)
	2. http://stv => (자료형: Samsung, TV), singleton, 즉시 로딩(생성)

11:05
	bean scope가 prototype인 경우는 게으른 로딩으로 자동 설정됨.

11:05
	init-method => 빈 객체 생성 시 초기 메소드를 설정하는 속성
	destroy-method => 빈 객체 생성 시 소멸 전 메소드를 설정하는 속성

3교시
11:35
	어노테이션을 기술하는 위치
	클래스 위, 메소드 위, 매개변수 앞

	@Configuration => 클래스 위에 기술
	=> 해당 어노테이션이 붙은 클래스는 스프링 빈 설정 파일로 사용된다.

	@Bean => 메소드 위에 기술
	=> 해당 어노테이션이 붙은 메소드는 객체로 생성된다.
	=> 객체명은 메소드명이 자동으로 객체명으로 처리된다.

6교시
16:05
	다른 스프링 빈 설정파일을 유기적으로 연결하는 방법
	1. GenericXmlApplicationContext("스프링빈설정파일1", "스프링빈설정파일2"); 를 선언할 때 매개인자로 해당 Spring Bean Configuration file들을 ,(콤마)로 나열하면 됨.
	예) new GenericXmlApplicationContext("applicationContext.xml", "speaker/speakerContext.xml");
	2. 하나의 스프링 빈 설정 파일에 연결하고자 하는 다른 스프링 빈 설정 파일을 import 태그를 이용하여 연결하면 됨.
	src/main/resources 까지의 경로를 가지고 있는 경로 alias => classpath:
	예) <import resource="classpath:speaker/speakerContext.xml"/>

	기본생성자로 객체 생성하기
	<bean id="객체명" class="패키지경로들.클래스명" />

	객체타입 매개인자를 1개 가지고 있는 기타생성자로 객체 생성하기
	** ref 속성: 매개인자의 값이 객체타입인 경우를 참조하는 속성
	<bean id="객체명" class="패키지경로들.클래스명">
		<constructor-arg ref="bean 태그로 설정한 객체명" />
	</bean>

	값을 입력받을 수 있는 매개인자를 1개 가지고 있는 기타생성자로 객체 생성하기
	**value 속성: 매개인자로 문자열 값이나, 숫자값 등 주소값이 아닌 값을 바로 입력받을 때 사용하는 속성(문자열 5000으로 입력되나 자료형이 자동으로 형변환이 됨, 매개인자가 문자열인 경우는 문자열 값으로 받을 수 있다.)
	<bean id="객체명" class="패키지경로들.클래스명">
		<constructor-arg value="bean 태그로 설정한 객체명" />
	</bean>

	---생성자가 아래와 같이 선언된 경우
	--첫번째는 Speaker 자료형의 객체 타입 변수(ref 속성)
	--두번째는 int 자료형의 값 타입 변수(value 속성)
	public Samsung(Speaker speaker, int price) { ... }

	-- sony 객체: Speaker 인터페이스를 상속받은 SonySpeaker 자료형 객체
	<bean id="sony" class="com.springbook.biz.SonySpeaker" />

	<!-- 매개인자가 2개이고, 자료형이 일치하는 기타생성자가 단 하나만 존재하는 경우는 constructor-arg 선언의 순서가 int, Speaker 순으로 되어도 자동으로 맵핑처리가 됨. -->
	<bean id="stv" class="com.springbook.biz.Samsung">
		<!-- 두번째는 int 자료형의 값 타입 변수(value 속성) -->
		<constructor-arg value="" />
		<!-- 첫번째는 Speaker 자료형의 객체 타입 변수(ref 속성) -->
		<constructor-arg ref="" />
	</bean>

	<!-- 매개인자가 2개이고, 자료형이 일치하는 기타생성자가 단 하나만 존재하더라도 반드시 constructor-arg 선언의 순서가 index 속성에 설정한 순서에 맞도록 Speaker, int 순으로 되어야 한다. -->
	<bean id="stv" class="com.springbook.biz.Samsung">
		<!-- 첫번째는 Speaker 자료형의 객체 타입 변수(ref 속성) -->
		<constructor-arg index="0" ref="sony" />
		<!-- 두번째는 int 자료형의 값 타입 변수(value 속성) -->
		<constructor-arg index="1" value="2500000" />
	</bean>

7교시
17:15
	1. new GenericXmlApplicationContext("applicationContext1.xml");
	=> 스프링 컨테이너를 구동시킨다.
	=> applicationContext1.xml (스프링 빈 설정파일)에 설정된 객체 생성 및 주입(생성자 주입, setter 주입 등)을 처리

	applicationContext1.xml
	// (Samsung, TV) 자료형을 가진 tv 객체를 생성
	// property(=set) name="price" => Samsung 클래스의 setPrice() 메소드를 호출하면서, 매개인자 값으로 1500000을 주입함.
	// 따라서 setPrice(1500000) 호출문을 태그 형식으로 기술한 것임.
	// property(=set) + name="speaker" (setSpeaker) => Samsung 클래스의 setSpeaker() 메소드를 호출하면서, 매개인자로 apple 객체를 주입함.
	// 따라서 setSpeaker(apple) 호출문을 태그 형식으로 기술한 것임.
	<bean id="tv" class="com.springbook.biz.Samsung">
		<property name="price" value="1500000" />
		<property name="speaker" ref="apple" />
	</bean>

8교시
17:50
	객체 자동주입(의존성 주입 = Dependency Injection = DI)
	=> 생성자, setter 포함 메소드, 멤버필드 등 데이터의 주입이 필요한 대상들에 데이터를 주입하는데, 개발자가 처리하는 것이 아닌 컨테이너에 의존하여 스프링 컨테이너가 자동으로 객체 주입을 하도록 처리하는 방식

17:55
	의존성 주입에 관련된 어노테이션
	=> 반드시 어노테이션으로 객체 생성이 되어 있어야만
	=> 의존성 주입 어노테이션이 활성화 된다.

	- byType 방식(=자료형 주입)
	: 컨테이너에 있는 객체 중 자료형을 찾아서 주입하는 방식
	@Autowired
	@Resource
	@inject

	- byName 방식(=객체명 주입)
	: 컨테이너에 있는 객체 중 객체명으로 찾아서 주입하는 방식
	@Autowired @Qualifier("객체명")
	@inject @Qualifier("객체명")
	@Resource(name="객체명")
	@inject @Named("객체명")
	@Autowired @Named("객체명")

	객체명:
	tv => 자료형: Samsung, TV...
	sony => 자료형: SonySpeaker, Speaker, ...
	apple => 자료형: AppleSpeaker, Speaker, ...

18:15
	객체 생성 관련 어노테이션 종류들(클래스 위에 기술해야 한다.)
	1. @Component 또는 @Component("객체명")
	2. @Service 또는 @Service("객체명"): 서비스 클래스에 붙이는 어노테이션
	3. @Repository 또는 @Repository("객체명"): DAO 클래스에 붙이는 어노테이션
	4. @Controller
	=> 이름 미 기술 시 클래스명의 앞글자만 소문자로 바꿔 사용함.

	=> 객체 생성 관련 어노테이션은 반드시 스프링 빈 설정파일에서 해당 어노테이션을 활성화해주어야만 사용 가능함.
	=> 활성화 방법: <context:component-scan base-package="패키지 경로 기술" />