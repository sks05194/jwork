5교시
14:35
	스프링 프레임워크: 자바 기반의 경량 프레임워크(개발에 필요한 전반적인 구조를 제공해주는 것을 프레임워크라고 함)

	스프링 부트: 스프링 프레임워크 기반으로 사용되는 기술

	=> 컨테이너: 객체 생성, 객체 주입, 객체간 상호 연결에 대한 전반적인 처리 등을 자동화해주고,
	presentation Layer(뷰 - 사용자에 관련된 부분)와
	buisness Layer(백엔드 - 데이터베이스 연결이나 dao, dto, svc 등등의 back-end 관련된 부분)을
	유기적으로 연결해주는 기능 등 기존 개발자들이 하던 일을 자동으로 알아서 처리하게끔 해주는 역할을 하도록 지시하는 기능을 제공

	=> 의존성(=Dependency): 개발자가 하던 일을 컨테이너에서 자동으로 알아서 처리하게끔 하는 것

	- 객체 생성: 클래스를 이용하여 내가 필요한 대상을 만드는 작업
	String str = new String();
	=> 컨테이너에서 처리

	- 객체 주입(Injection)
	Student st = new Student();

	StudentDao dao = new StudentDao(Student st);

	class StudentDao {
		private Student st;

		StudentDao(Student st) { // 주입
			this.st = st;
		}
	}

	- 외부 라이브러리 주입(=Dependency 이용)

	- 연결된 외부 라이브러리 자동 검색(=Dependency Lookup: 의존성 검색)

	=> 의존성 주입(Dependency Injection = DI): 필요한 라이브러리나 객체 등을 개발자가 직접 구현하지 않고, 스프링 컨테이너를 통해 자동으로 필요한 데이터들을 주입하는(받는) 방식

	객체: bean(SpringBean), Component
	Command(VO 클래스에 자동 주입 처리되는 객체)

15:10
	Project Object Model => pom.xml(=프로젝트 형상관리 파일)

	** 형상관리: 버전(문서, 파일, 라이브러리 등등...) 관리
	** 형상관리 방식: 
	Maven(메이븐): 형상관리를 xml 기반(markup 태그 방식으로 기술)의 파일로 관리하는 방식(형상관리 파일명: pom.xml)
	Gradle(그레이들): 형상관리를 .gradle 기반(json 방식으로 기술)의 파일로 관리하는 방식(형상관리 파일명: build.gradle)

6교시
16:00
	java만으로 프로젝트를 생성할 때:
	1. 우측 상단의 perspectiv 모드를 java Project로 변경
	2. File - New - java Project

	jsp 프로젝트 생성할 때:
	1. 우측 상단의 perspective 모드를 JavaEE로 변경
	2. File - New - Dynamic Web Project

	spring Framework 프로젝트 생성할 때:
	1. 우측 상단의 perspective 모드를 spring으로 변경
	2. 방법 2가지
		=> 2-1: File - New - Spring Legacy Project (템플릿: Spring MVC 선택)
			(**반드시 SpringMVC 템플릿 추가 후 가능**)
		=> 2-2: File - New - Dynamic Web Project로 생성 후
			- 생성된 프로젝트명에서 마우스 우클릭 메뉴의 configuration 선택
			- convert Maven Project

	프로젝트 만들기 전에
	C:\fullstack\swork\.metadata\.plugins\org.springsource.ide.eclipse.commons.content.core 여기에 https-content.xml(공유폴더 > Spring > spring설치및설정관련 에 있음) 붙여넣기

7교시
17:05
	스프링 프레임워크 프로젝트 생성시의 순서(3-1 -> 3-2 순서. 3번과 3-1, 3-2는 순서 관계 없음.)
	1. 라이브러리 추가 => pom.xml 파일에 dependencies 태그 안에 dependency 태그 추가
	2. .java 파일 생성 => src/main/java 폴더 안에 필요한 패키지와 자바 파일 생성
	3-1. database에 관련된 정보를 .properties 파일 생성 및 추가 => src/main/resources
	3-2. 스프링 빈 설정파일 생성 및 추가 => src/main/resources 또는 src/main/webapp/WEB-INF 폴더 안
	3. .css, .js, .html, .jsp, 이미지 등등 필요한 파일 기술 => src/main/webapp 폴더 안(외부 접근 가능) 또는 src/main/webapp/WEB-INF 폴더 안(보안 - 외부 접근 불가) 필요한 파일들로 생성 및 추가
	4. web.xml에 필요한 태그들 기술