객체를 생성할 수 있는 어노테이션 종류

xml파일에서 component scan에 대한 설정을 해주어야 한다.
1. namespace에서 context태그에 대한 네임스페이스를 선택(저장)
2. <context:component-scan base-package=”경로(패키지)”></context:component-scan>
예시 : com.spring.biz , com.spring.comp , com.spring.sett

경로값 : com.spring.* , com.spring.comp

DAO클래스 , DTO(=VO)클래스 , Controller클래스 , service클래스(비즈니스 클래스 = 서비스 로직: 직접 처리하는 일 없이 남에게 시키는 기만 클래스)

객체생성 관련 어노테이션 종류들:

1. @Componect 또는 @Componect (”객체명”)
⇒위의 클래스들 중에서 DAO , Controller, Service 클래스들을 제외한 나머지 클래스들을 객체화 시킬 때 사용하는 어노테이션 
⇒위치 : 클래스명 위에 위치함. (기술함)
형식: @Componect만 기술할 경우
 : 자동으로 객체명이 생성 , 클래스명을 가져와서 앞 글자만 소문자로 변경한 것을 객체 명으로 인식함

2. @Service 또는 @Service(”객체명”)  : 서비스 클래스에 붙이는 어노테이션
⇒비즈니스 로직을 처리하는 service클래스 객체를 의미. DAO클래스에 일을 시키는 기능만을 가지고 있다. 
⇒인터페이스를 상속받은 impl클래스에 기술

3. @Repository 또는 @Repository(”객체명”) : DAO 클래스에 붙이는 어노테이션
⇒DAO클래스 객체를 의미 , 데이터베이스와 가장 접점에 닿아있는 클래스로 SQL명령문을 제어하는 클래스

4. @Controller
⇒Controller클래스 객체를 의미 , 클라이언트의 요청을 서블릿으로부터 넘겨받아서 직접적인 처리를 하는 클래스 ( 서브 컨트롤러를 스프링프레임워크에서는 컨트롤러로 명칭)
⇒ 사용자 요청을 제어하는 클래스에 기술

---

DI(Dependency Injection) : 의존성 주입
- 스프링 컨테이너가 직접 객체들 사이에 의존관계를 처리하는 것을 의미함. 필요한 데이터들(멤버필드 , 메소드난 생성자의 매개변수들)을 스프링컨테이너가 자동으로 주입을 해주는 방식 
(개발자가 수동으로 처리하던 부분을 스프링 컨테이너에 의존하여 처리하는 방식을 말함)

-  byType 방식(=자료형 주입) : 컨테이너에 있는 객체중 자료형을 찾아서 주입하는방식
1. @Autowired
⇒주로 변수 위, 매개변수가 있는 메소드의 위 , 매개변수의 앞에 기술가능.
⇒해당 어노테이션이 기술된 변수나, 매개변수의 자료형으로 생성된 객체가 있는지 확인하여 존재하는 경우 자동으로 해당 객체를 주입시킨다.
⇒ 예시 : 
@Autowired 
private Speaker speark; 

@Autowired
public Samsung(Speaker speark) {….}

public void volumnUp(@Qualifier(”apple”) Speaker speark){…. }

2.  @Resource
⇒ @Autowired  동일한 기능을 하는 어노테이션

3.  @Inject

⇒ @Autowired  동일한 기능을 하는 어노테이션

---

byName 방식(=객체명 주입) : 컨테이너에 있는 객체 중 객체명으로 찾아서 주입하는 방식
1. @Qualifier(”객체명”)
⇒ @Autowired와 같이 사용됨. 동일한 자료형인 객체가 2개 이상 존재할 경우
@Autowired만으로 처리를 할수 없기 때문에 이 부분을 보완하여 같이 사용하는 어노테이션다.

2. @Named("객체명")
⇒ @Inject  와 같이 사용됨. 동일한 자료형인 객체가 2개 이상 존재할 경우
@Inject만으로 처리를 할수 없기 때문에 이 부분을 보완하여 같이 사용하는 어노테이션다.

3.  @Resource(name="객체명”)
⇒ @Autowired + @Qualifier(”객체명”)를 합쳐놓은 어노테이션이다.
⇒ @Inject + @Named("객체명")를 합쳐놓은 어노테이션이다.

생성자, setter포함 메소드, 멤버필드 등 데이터의 주입이 필요한 대상들에 데이터를 주입하는데, 개발자가 처리하는 것이 아닌 컨테이너에 의존하여 스프링컨테이너가 자동으로 객체 주입을 하도록 처리하는 방식

의존성 주입에 관련된 어노테이션

⇒ 반드시 어노테이션으로 객체 생성이 되어 있어야만
⇒ 의존성 주입 어노테이션이 활성화된다.