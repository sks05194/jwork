아파치 톰캣 다운로드 - Tomcat 9.0 - 9.0.93 - Core - 64-bit Windows zip (pgp, sha512) 다운로드

기본 포트번호 8080 (오라클이랑 겹침)

conf, bin, webapps 폴더 많이 사용함

.html, .css, .js => 정적파일 (컴파일을 한 후 번역을 따로 안해도 됨)

.jsp, .java => 동적파일 (컴파일을 한 후 번역이 필요함)

WAS(Web Application Server) 동적인 파일들 핸들링 할 수 있는 서버

아파치 - WS(Wep Server)

톰캣 = WAS

설치순서

자바 - 이클립스 - 오카클 - 아파치 톰캣(마지막)

==================================================================================

설정

1. conf - sever(메모장으로 열기) - <Service name="Catalina"> -  <Connector port="8080" protocol="HTTP/1.1"

=>  <Connector port="8090" protocol="HTTP/1.1" (오라클과 포트번호가 겹침)

2. bin - startup.bat실행(열기) - 액세스 허용 - shutdown.bat실행(닫기)

3. 크롬 브라우저에 http://localhost:8090/ 입력

4. 압축파일 삭제

5. jspwork폴더 생성

======================================================================================

설치순서: jdk => 환경변수 설정

데이터베이스 : oracle => 사용자계정 및 권한 설정

웹어플리케이션서버 설치(WAS : Web Application Server : 아파치 톰캣) => 포트번호 변경

이클립스(IDE : 통합개발환경 = 통합개발도구) => 환경설정

이클립스 환경설정 순서

1. Window -> Preferences -> Java -> Installed JREs -> Add -> Sandard VM
2. Window -> Preferences -> Server -> Runtime Environments -> Add - Appache Tomcat v9.0 
-> Create a new local host(반드시 체크) -> Browse -> C:\apache-tomcat-9.0.93
3. Window -> Preferences -> General -> workspace 인코딩 설정 및 web browers설정 -> Chrome으로 설정 - Other: UTF-8로 설정
4. Window -> Preferences -> Web -> html, css, jsp 인코딩 설정 - files검색 - UTF-8로 설정

=======================================================================================

jsp : Java Server Page
자바를 이용해서 데이터베이스 서버와 연결할 수 있는 기능을 제공하는 페이지 기술

버전 확인
아파치톰켓 사이트 - Download - Which version?에서 확인 가능

new - Dynamic Web Project - 프로젝트이름

jspfirst : 프로젝트명 = 애플리케이션명 = 컨텍스트 도메인 다음에 가장 먼저 인식하는 root 경로

프로토콜종류(http:)//ip또는 도메인: 포트번호/컨텍스트/경로?쿼리문자열

http://localhost:8090/jspfirst/
http:/127.0.0.1:8090/

C:\apache-tomcat-9.0.93\conf
web.xml : 웹어플리케이션의 전반적인 설정을 관리하는 파일

============================================================================================

폴더

src/main/java -> .java파일만

src/main/webapp -> .css .html .jsp .img 파일 등등...

WEB-INF -> 보안폴더 (외부에서 접근할 수 없음)

===============================================================================================

http://localhost:8090/jspfirst/hello.jsp

jps 스크립트 태그들 : 자바 소스 코드를 기술할 수 있는 태그
jsp스크립트 태그들은 절대 중첩해서 사용 불가능하다.

1. 지시태그(Drection Tag) : 페이지의 인코딩, 필요한 라이브러리 추가, 언어 설정등 페이지 전반적인 설정을 처리할 때 사용하는 태그임.
<%@ 속성명="속성값" 속성명="속성값" %> 

2. 실행태그 (Scriptlet Tag) : 페이지에서 실행할 소스코드가 기술되는 태그= 자바파일에서 메소드 안에 기술되는 코드들과 동일함.
(지역변수, 반복문, 조건문, 출력문(System.out.print~~, out.print~~~) )
<% 실행코드들...; %>

3. 선언태그(Declaration Tag) : 전역변수와 전역 메소드들 선언하는 태그 => 자바파일의 클래스 안에 기술되는 코드들과 동일함.
<%! 전역변수선언, 전역메소드선언(System.out.print~~~) %>

4. 표현태그(Expression Tag) : body태그에 출력할 수 있는 출력문을 줄여놓은 태그임.
jsp 내장 객체 중 body태그에 출력을 할 수 있는 기능을 제공해 주는 객체 : out 
out.print("출력할 문자열 값<br>"); => html형식으로 출력해줌.
<%=출력할 값%> 안에 절대 세미콜론(;)을 기술하면 안됨.

============================================================================================

선언태그는 어디에 기술하든 가장 먼저 컴파일됨

<%--  --%> jsp 주석 (페이지에 표시되지 않음(에러가 나는 경우는 표시됨))
<-- --> html 주석 (페이지에 표시됨)

============================================================================================

페이지 이동방식 : 

1. 리다이렉트(리다이렉팅) : 
데이터 전송 할 수 없다. 
페이지 이동이 이루어지는 방식(url변경됨) 
대표적인 리다이렉트 방식에 관련된 속성 : a태그의 href, form태그의 action, 자바스크립트의 location.href속성으로 이동하는 방식 등

2. 포워드(포워딩) : 
데이터 전송을 할 수 있다. 
url변경이 없이 페이지 이동을 하는 방식.
서버단에서 forward방식으로 전송하는(이동하는) 방식
대표적인 포워딩 방식 : 지시태그의 에러페이지 방식이나 jsp의 forward 속성으로 이동하는 방식 등

=============================================================================================

iserrorPage="true"
exception 내장 객체 사용가능

isELIgnored="true"
표현 언어 무시 
	<%
	request.setAttribute("ReqyestAttribute", "request 내장 객체");
	%>
	${RequestAttribute}
==========================================================================================

이클립스 찌꺼기 지우는법
Project - clean

톰캣 찌꺼기 지우는법
Servers - clean
Servers - clean Tomcat work Directory

==========================================================================================

서로 다른 페이지를 하나의 페이지로 연결하는 방법

1. include지시태그를 사용하는 방법 : 해당 파일의 소스코드를 그대로 가져와서 붙여넣기 한 뒤에 같이 컴파일을 한다.
2. jsp:include 액션태그를 사용하는 방법 : 해당 파일의 소스코드를 html형식으로 컴파일을 마친 후에 해당 코드를 붙여넣기한다.

===========================================================================================
jsp 스크립트 태그 :
<%@ : 지시태그 <%! : 선언태그 <% : 실행태그 <%= :표현태그

=> java소스코드로 기술하는 스크립트 태그들

액션태그: 객체 생성, getter, setter메소드들을 쉽게 호출하여 연결하여 사용하거나 페이지 이동, 페이지 연결, 파라미터 전달등의 기능을 사용할 때 이용하는 태그임.
jsp에서 제공하는 기본 스크립트 태그들의 기능을 조금 더 편하게 확장하여 자바 소스코드가 아닌 태그 형식으로 코드를 기술 할 수 있도록 나온 태그임.
동적인 기능을 부여할 때 사용함.
jsp기본 스크립트 태그 중 표현 태그를 이용하거나 EL(표현 언어) 속성값을 기술할수 있다.
형식: <jsp:액션태그명 속성명 = "속성값"></jsp:액션태그명 속성명 = "속성값"> 또는
<jsp:역션태그명 속성명 = "속성값"/>

=====================================================================================================

라이브러리 추가 및 파일을 만드는 순서

1. 필요한 라이브러리 추가를 제일 먼저 진행할 것
2. .java파일을 2번째로 만들 것
3. jsp, html, css, js파일 필요한 순서로 만들것
4. WEB-INF안에 있는 web.xml파일에 필요한 코드 기술할 것.

========================================================================================================

jsp 내장객체 및 영역 (scope=" ")

1. pageContext : 현재 페이지 내에서의 범위를 가지는 내장 객체임.
현재 페이지 내의 전반적인 정보를 담고 있고, 페이지 내에서의 데이터를 설정하거나 변경할 때 사용하는 내장 객체임.
**scope를 기술하지 않으면 기본적으로 pageContext임

2. request : 클라이언트가 서버로 요청한 시점부터 서버가 클라이언트에게 응답하기 전까지, 또는 요청을 처리할 때 리다이렉트를 만나기 전까지 살아있는 내장 객체임.
**요청에 대한 전반적인 정보를(=데이터) 담아가는 객체

3. session : 현재 사용한 브라우저가 닫힐 때 까지 또는 내가 세션 객체를 초기화하기 전까지 살아있는 내장 객체임.
**대부분 로그인 정보를 처리할 때 사용하는 객체
**세션객체 설정을 해주지 않으면 세션객체가 자동으로 소멸되는 시간은 30분

4. application : 프로젝트가 실행되어 종료되는 순간까지 살아있는 내장객체임. 
애플리케이션의 전반적인 정보를 담고 있으며, 애플리케이션의 전반적인 설정이나 변경을 처리할 때 사용하는 객체임.

pageContext, session, application 내장객체는 attribute(Object 자료형)만 쓸 수 있음.
값 설정: setAttribute("속성명(name)", 속성값(value))
값 가져오기: getAttribute("속성명(name)", 속성값(value))

request는 attribute, parameter(String)을 쓸 수 있음
parameter는 get, post 방식으로로 나뉨 
get  : form, a, js ... / 속성명(name), 속성값(value) (post방식을 제외한 나머지 모두 get방식)
post : form method="post" / 속성명(name)", 속성값(value) (post방식: 데이터를 받는 곳에서 인코딩 필요)

input type="text" => ""값 반환
input type="checkbox", input type="radio" => null값 반환 (속성명 자체가 없음)

================================================================================================================================

Parameter(파라미터): Get방식이나 Post방식으로 전송하는 모든 데이터

================================================================================================================================

URI : Uniform Resource Identifier

URL : Uniform Resource Locator

URN : Uniform Resource Name

https://hanamon.kr/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EA%B8%B0%EB%B3%B8-url-uri-urn-%EC%B0%A8%EC%9D%B4%EC%A0%90/

http://localhost:8090/jspfirst/08_05_03_request03.jsp?uid=admin&pwd=1234

================================================================================================================================

데이터를 전송하는 방식과 방법

POST방식 
form태그의 method를 post로 설정하여 전송

GET 방식
1. form태그의 method를 get으로 설정하여 전송
2. 페이지를 이동할 수 있는 url경로 뒤에 쿼리 문자열을 기술하여 전송
예: <a href="08_05_03_request05.jsp?nowPage=1">1</a>
예: location.href = "08_05_03_request05.jsp?nowPage=1"
3. jsp:param태그를 사용하여 전송 (반드시 보내는 곳에서 인코딩, 받는 곳에서 디코딩 처리를 해주어야한다.)


================================================================================================================================

jsp내장객체
request	=> HttpServletRequest자료형으로 만든 객체

response내장객체 : 서버가 응답하는 모든 전반적인 정보와 기능을 담고 있는 jsp에서 내장객체이다. 
페이지 이동(리다이렉트 방식), 파일 생성, 로그 기록, 쿠키 생성, 응답시 필요한 데이터들을 전송하거나 할 때 사용하는 객체
=> HttpServletResponse자료형으로 만든 객체

================================================================================================================================

URL 주소 변경
/ contextpass를 삭제
./ 같은 폴더로 이동
../ 상위 폴더로 이동

================================================================================================================================

Context 변경방법
(**반드시 톰캣 서버를 끄고 할 것!!!)
(**반드시 path설정시 앞에 /를 먼저 기술할 것!!!)

이클립스에서 변경하기
1. Sever탭 선택
-> Tomcat ~~~ 더블클릭
-> 하단의 module탭 선택하면 나오는 화면에서 변경하고자하는 프로젝트명선택
-> 좌측의 edit메뉴 선택
-> 팝업창에서 변경하고자하는 path를 입력할 것
예) "/md"	또는 "/"(=>context를 없앰) 기본값: "/프로젝트명"

2. 우측의 project Explore탭 안의 Severs폴더 선택 
-> Tomcat ~~~폴더 확장하면 나오는 파일 중에 sever.xml파일 선택하여 열기
-> 파일 맨 하단으로 내려서
<Host ~~></Host>태그 안의 가장 마지막에 있는
<Context ~/>태그 수정할 것
예: <Context docBase="프로젝트명" path="/변경하고자하는경로명" reloadable="true"/>

====================================================================================================================================

apache tomcat에서 직접 수정하기
[apache-tomcat-버전명시] 폴더
-> conf 폴더 ->
server.xml파일 선택하여 열기
-> 파일 맨 하단으로 내려서
<Host ~~></Host>태그안의 가장 마지막에
<Context ~/>태그 기술할 것
예: <Context docBase="프로젝트명" path="/변경하고자하는경로명" reloadable="true" source="org.eclipse.jst.jee.server:jspfirst"/></Host>

====================================================================================================================================

성공 응답
200 OK
요청이 성공적으로 되었습니다. 
성공의 의미는 HTTP 메소드에 따라 달라집니다: 
GET: 리소스를 불러와서 메시지 바디에 전송되었습니다. 
HEAD: 개체 해더가 메시지 바디에 있습니다. 
PUT 또는 POST: 수행 결과에 대한 리소스가 메시지 바디에 전송되었습니다. 
TRACE: 메시지 바디는 서버에서 수신한 요청 메시지를 포함하고 있습니다.

클라이언트 에러 응답
404 Not Found
서버는 요청받은 리소스를 찾을 수 없습니다. 
브라우저에서는 알려지지 않은 URL을 의미합니다. 
이것은 API에서 종점은 적절하지만 리소스 자체는 존재하지 않음을 의미할 수도 있습니다. 
서버들은 인증받지 않은 클라이언트로부터 리소스를 숨기기 위하여 이 응답을 403 대신에 전송할 수도 있습니다. 
이 응답 코드는 웹에서 반복적으로 발생하기 때문에 가장 유명할지도 모릅니다.

서버 에러 응답
500 Internal Server Error
서버가 처리 방법을 모르는 상황이 발생했습니다. 
서버는 아직 처리 방법을 알 수 없습니다.





