※ 시간의 순서에 따라 기술되었습니다.

1교시
09:40
    https://hanamon.kr/네트워크-기본.url-uri-urn-차이점/

10:00
    데이터를 전송하는 방식과 방법
        POST 방식: form 태그의 method를 post로 설정하여 전송
        GET 방식: jsp:param 액션태그를 제외한 나머지 전송시에는 인코딩이 필요 없다.
            1. form 태그의 method를 get으로 설정하여 전송
            2. 페이지를 이동할 수 있는 url 경로 뒤에 쿼리문자열을 기술하여 전송
                예: <a href="08_05_03_request05.jsp?nowPage=1">1</a>
                예: location.href = "08_05_03_request05.jsp?nowPage=1"
            3. jsp:param 태그를 사용하여 전송(반드시 보내는 곳에서 인코딩, 받는 곳에서 디코딩 처리를 해주어야 한다.)

2교시
11:15
    jsp 내장객체
        request => HttpServletRequest 자료형으로 만든 객체
    response 내장객체
        서버가 응답하는 모든 전반적인 정보와 기능을 담고 있는 jsp에서 제공하는 내장객체.
        페이지 이동(리다이렉트 방식), 파일 생성, 로그 기록, 쿠키 생성, 응답시 필요한 데이터들을 전송하거나 할 때 사용하는 객체
        => httpServletResponse 자료형으로 만든 객체

3교시
12:20
    context 변경방법
    (반드시 Tomcat 서버 종료한 뒤에 해야합니다!!!!!)
    (**반드시 path 설정시 앞에 /를 먼저 기술해야 합니다!!!!)

    이클립스에서 변경하기
        1. Servers 탭 선택
            -> Tomcat ~~~ 더블클릭
            -> 하단의 module탭 선택하면 나오는 화면에서 변경하고자하는 프로젝트명 선택
            -> 좌측의 edit 메뉴 선택
            -> 팝업창에서 변경하고자하는 path를 입력할 것
            예: "/md" 또는 "/"(=>context를 없앰) 기본값: "/프로젝트명"
        2. 우측의 project Explore탭 안의 Servers 폴더 선택
            -> Tomcat ~~~ 폴더 확장하면 나오는 파일 중에 sever.xml파일 선택하여 열기
            -> 파일 맨 하단으로 내려서
            <Host ~~></Host> 태그 안의 가장 마지막에 있는
            <Context ~/> 태그 수정할 것
            예: <Context docBase="프로젝트명" path="/변경하고자하는경로명" reloadable="true"/>
            ===============================================================================
            apache tomcat에서 직접 수정하기
            [apache-tomcat-버전명시] 폴더
            -> conf 폴더
            -> sever.xml파일 선택하여 열기
            -> 파일 맨 하단으로 내려서
            <Host ~~></Host> 태그 안의 가장 마지막에
            <Context ~/> 태그 기술할 것
            예: <Context docBase="프로젝트명" path="/변경하고자하는경로명" reloadable="true"/>

5교시
14:40
    application: jsp에서 제공하는 내장객체로 애플리케이션(프로젝트 단위)의 전반적인 정보와 기능들을 담고 있는 객체임
    프로젝트가 실행이 되는 순간부터 프로젝트가 종료되는 순간까지 살아있는 가장 넓은 범위의 생명주기를 가진 객체임

6교시
16:55
    jsp 예외처리(우선순위가 높은 순서대로)
        1. try ~ catch
        2. page 지시태그의 errorPage 속성
        3. web.xml에 <error~>태그로 지정하는 예외처리
        4. 브라우저에서 자동으로 제공하는 기본 예외처리