※ 시간의 순서에 따라 기술되었습니다.

1교시
9:40
    셀프조인 (self join) : 동일한 테이블을 합쳐서 데이터를 추출하는 조인 방법

2교시
11:15
    USING을 이용한 조인 조건 지정, ON대신 사용가능.
    ANSI조인인 경우 사용가능
    (단, 조인 조건에 사용되는 칼럼명이 동일해야 한다.)

3교시
11:30
    OUTER JOIN:
    2개 이상의 테이블이 조인될 때 어느 한쪽 테이블엔 데이터가 존재하는데, 다른 쪽 테이블에는 데이터가 존재하지 않는 경우에, 데이터가 누락되는 문제를 해결하기 위해 사용되는 조인기법임. (해당 값이 없는 컬럼은 NULL 처리함.)
    아우터연산자 : (+) => 위치 : 데이터가 없는 테이블쪽에 기술할 것

    1. LEFT OUTER JOIN : FROM절의 테이블에 해당되는 값을 모두 표현하고, 그 뒤에 JOIN절에 해당하는 테이블의 값을 표현하는 방식.
    => LEFT OUTER JOIN
    형식 :
    SELECT 컬럼, ...
    FROM 왼쪽테이블, 오른쪽테이블
    WHERE 왼쪽테이블컬럼명 = 오른쪽테이블컬럼명(+)

    => ANSI LEFT OUTER JOIN
    형식 :
    SELECT 컬럼, ...
    FROM 왼쪽테이블
    LEFT OUTER JOIN 오른쪽테이블
    ON 왼쪽테이블컬럼명 = 오른쪽테이블컬럼명;
    -- USING (동일한이름의컬럼명);

    2. RIGHT OUTER JOIN : JOIN절에 해당하는 테이블의 값을 모두 표현하고, 그 뒤에 FROM절의 테이블에 해당되는 값을 표현하는 방식.
    => RIGHT OUTER JOIN
    형식 :
    SELECT 컬럼, ...
    FROM 왼쪽테이블, 오른쪽테이블
    WHERE 왼쪽테이블컬럼명(+) = 오른쪽테이블컬럼명

    => ANSI RIGHT OUTER JOIN
    형식 :
    SELECT 컬럼, ...
    FROM 왼쪽테이블
    RIGHT OUTER JOIN 오른쪽테이블
    ON 왼쪽테이블컬럼명 = 오른쪽테이블컬럼명;
    -- USING (동일한이름의컬럼명);

    
    3. FULL OUTER JOIN : 조인할 두 테이블의 값을 모두 표현하고, 해당 값이 없는 컬럼은 NULL 처리함. (ANSI JOIN만 가능, 아우터 연산자 사용 불가)
    => ANSI FULL OUTER JOIN
    형식 :
    SELECT 컬럼, ...
    FROM 왼쪽테이블
    FULL OUTER JOIN 오른쪽테이블
    ON 왼쪽테이블컬럼명 = 오른쪽테이블컬럼명;
    -- USING (동일한이름의컬럼명);

5교시
14:35
    ** View (가상테이블)
    - 테이블과는 달리 데이터 저장 공간이 없으며, 쿼리문을 저장하고 있는 객체
    - 뷰는 실제 자료를 갖지는 않지만, 뷰를 통해 테이블을 관리할 수 있다.
    - 하나의 테이블에 뷰의 개수는 제한이 없다.
    ========================================
    뷰 성격에 따른 가능 범위
    - 단순뷰(SIMPLE VIEW) :
    VIEW를 생성할 서브쿼리에 조인 조건없이 1개의 테이블로 만들어지는 간단한 VIEW.
    하나의 table에서 뽑아오며 함수를 사용하지 않는다.
    DML(INSERT, UPDATE, DELETE)사용 가능

    - 복합뷰(COMPLEX VIEW) : 여러 개의 테이블이 JOIN되어 생성되는 것.
    하나 이상의 TABLE에서 데이터를 추출하며 함수(GROUP BY HAVING등과 같은 함수)를 사용한다.
    DML(INSERT, UPDATE, DELETE)사용 불가능

    - 인라인 VIEW (INLINE VIEW) : 여러 번 사용할 필요 없이 1회만 필요한 VIEW일 경우 SQL명령문의 FROM절에 VIEW의 서브쿼리 부분을 바로 적어주면 되며 이런 일회용 VIEW를 말함.
    ========================================
    - 생성 형식(Syntax)
    CREATE VIEW 뷰이름
    AS
    SELECT 서브쿼리;

    * 뷰 삭제 및 변경
    - 뷰는 실체가 없는 가상 테이블이기 때문에 수정이 불가능하다.(삭제후 재생성 가능)
      뷰를 삭제한다는 것은 데이터 딕셔너리에 저장되어 있는 뷰의 정의를 삭제하는 것을 의미

    - 형식(Syntax)
    DROP VIEW 뷰이름;

6교시
15:55
    세미조인(SEMI-JOIN) :
    두 개의 A, B테이블을 조인하는 경우 B테이블의 데이터가 A테이블에 존재하거나 포함되는 경우를 추출하는 조인 방식
    IN, EXISTS 연산자를 이용해 서브 쿼리에 있는 데이터에 대해서만 메인쿼리에서 추출하는 조인 방법

    안티 조인(ANTI-JOIN):
    두 개의 A, B테이블을 조인하는 경우 B테이블의 데이터가 A테이블에 존재하지 않거나 포함되지 않는 경우를 추출하는 조인 방식
    NOT IN, NOT EXISTS 연산자를 이용해 서브쿼리에 없는 데이터만 메인 쿼리에서 추출하는 조인

7교시
16:45
    인덱스(Index)란?
    - 데이터베이스 테이블에 있는 데이터를 빨리 찾기 위한 용도의 데이터베이스 객체
    - 일종의 색인기술 (목차)
    - 테이블에 index를 생성하게 되면 index Table을 생성해 관리한다.
    - 인덱스는 테이블에 있는 하나 이상의 컬럼으로 만들 수 있다.
    - 가장 일반적인 B-tree(Binary Search Tree)인덱스는 인덱스 키(인덱스로 만들 테이블의 컬럼 값)와 이 키에 해당하는 컬럼 값을 가진 테이블의 로우가 저장된 주소 값으로 구성됩니다.
    - 인덱스는 1개 이상의 컬럼으로 생성할 수 있으며, 최대 32개의 컬럼까지 지정하여 생성할 수 있다.
    - 2개 이상의 컬럼으로 생성된 인덱스를 복합 인덱스라고 부른다.
    - 테이블에 종속적이다.
    - 기본키(주 키 = PRIMARY KEY), 유일키(UNIQUE) 생성 시 자동으로 인덱스 생성됨.


    INDEX를 사용해야 할 컬럼:
    - where절이나 조인 조건에서 자주 사용되는 열에 생성
    단, 컬럼이나 값에 대한 가공이 없어야 한다.
    SUBSTR(deptno, 1, 2) = 10 (x)
    deptno = 10 (O)
    - 조회결과가 전체행의 5~15% 정도로 읽어들일 것으로 예상되는 컬럼
    단, 5~15%라도 데이터가 너무 많을 경우에는 인덱스를 사용해도 소용이 없을 수 있다.
    그런 경우에는 다른 방법으로(페이징처리 등) 처리를 해주는 것이 좋다.

    INDEX를 사용하지 말아야 할 컬럼:
    - 테이블에 데이터가 너무 적거나 또는 너무 많은 데이터가 있는 경우
    - where절에 자주 사용되니 않는 열은 사용되지 않는다.
    - 중복값이 많은 경우
    - 테이블이 자주 갱신될때
    - 값에 null이 많은 컬럼

    인덱스 생성
    --형식( = 문법 = SYNTAX)
    CREATE INDEX [계정명(=스키마명).]인덱스명 ON [계정명.]테이블명(컬럼1, 컬럼2, 컬럼3......);

    -- 인덱스 재생성
    --형식( = 문법 = SYNTAX)
    CREATE INDEX 인덱스명 ON 테이블명(컬럼명, 컬럼명, ...);
    오라클은 ALTER INDEX문을 사용해서 인덱스 컬럼 변경 불가.
    인덱스의 컬럼을 추가, 제거 또는 순서를 변경하기 위해서는
    인덱스를 삭제(DROP)하고 다시 생성(CREATE)해야한다.

    -- 인덱스 삭제(인덱스 컬럼 수정/변경/제거는 삭제 후 재생성으로 가능)
    --형식( = 문법 = SYNTAX)
    DROP INDEX 인덱스명;

    수정형식
    --인덱스명 변경(인덱스명만 변경가능, 컬럼 추가, 삭제, 변경 불가)
    --형식( = 문법 = SYNTAX)
    ALTER INDEX 기존인덱스명 RENAME TO 변경인덱스명;

    인덱스 리빌드: 인덱스 속도가 저하되었거나, 깨졌을 경우
    --형식( = 문법 = SYNTAX)
    ALTER INDEX 인덱스명 REBUILD;