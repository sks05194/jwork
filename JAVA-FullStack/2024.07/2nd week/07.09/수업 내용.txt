※ 시간의 순서에 따라 기술되었습니다.

1교시
9:35
    제약조건
    정식형식, 단축형식
    - 단축형식 : 이름이 없고, 테이블 정의 시 컬럼명 자료형 뒤에 제약조건명만 기술하는 방식
    - 정식형식 :
        CONSTRAINT 제약조건이름 제약조건명
    - 위치 : 
        컬럼레벨방식 => 컬럼선언부의 자료형 뒤에 오는 경우
        테이블레벨방식 => 컬럼처럼 별도로 테이블 안에 선언되는 경우

        제약조건이름 : 테이블명_컬럼명_제약조건명
        
09:40
    * Data Dictionary (데이터 사전)
        - 데이터 딕셔너리는 데이터베이스 자원을 효율적으로 관리하기 위한 정보(메타 데이터)를 저장하고 있다.
        - 사용자는 데이터 딕셔너리의 내용을 직접 수정하거나 삭제할 수 없다.
        - USER_데이터 딕셔너리 : 사용자 계정이 소유한 객체 등에 관한 정보를 조회

    * 제약 조건 확인
    - P : PRIMARY KEY
    - R : FOREIGN KEY (REFERENCES)
    - U : UNIQUE
    - C : NOT NULL, CHECK

10:05
    키의 종류
    1) 슈퍼 키 (Super key)
    슈퍼 키는 테이블에 존재하는 필드들의 부분집합으로써, 유일성, 최소성(irreducibility)을 만족해야 한다.

    2) 후보 키 (Candidate key)
    후보 키는 이름에서도 나타나듯이 기본 키가 될 수 있는 후보를 말한다. 후보 키는 테이블에 존재하는 전체 필드의 부분집합으로써, 유일성(uniqueness)과 최소성(irreducibility)을 만족해야 한다. 유일성은 모든 레코드에서 해당 필드에 중복된 값이 나타나지 않는다는 속성이며, 최소성은 최소한의 필드로 레코드를 유일하게 구별할 수 있어야 한다는 속성이다.

    3) 기본키 = 주 키 (Primary key)
    기본 키는 테이블에서 특정 레코드를 구별하기 위해 후보 키 중에서 선택된 고유한 식별자를 말한다. 기본 키는 후보 키와 같이 유일성과 최소성에 대한 속성을 가져야 하며, NULL값을 가질 수 없다. 기본 키를 설정할 때는 아래와 같은 두 가지 사항을 고려하는 것이 좋다.

    값이 자주 변경되지 않는 것을 선택: 기본 키로 선택된 필드는 값이 변경될 때마다 해당 값이 유일한지, NULL값은 아닌지를 검사해야 하기 때문에 값이 자주 변경되지 않는 필드를 기본 키로 설정하는 것이 바람직하다.

    값이 단순한 것을 선택: 기본 키로 선택된 필드에 저장되는 데이터가 많은 자릿수를 갖는 정수거나 많은 문자를 포함하는 문자열이라면, 기본 키를 비교할 때 그만큼 많은 비용이 소모될 것이다. 그러므로, 짧고 단순한 형식의 데이터를 저장하는 필드를 기본 키로 설정하는 것이 DBMS의 성능 측면에서 유리하다.

    4) 대체 키 (Alternate key)
    후보 키 중에서 기본 키로 선택된 것들을 제외한 모든 키를 대체 키라고 한다.

    5) 복합 키 (Composite key)
    한 개 이상의 필드를 포함하는 키를 복합 키라고 한다.

    6) 외래 키 (Foreign key)
    외래 키는 한 테이블의 키 중에서 다른 테이블의 레코드를 유일하게 식별할 수 있는 키를 말한다. 외래 키는 한 테이블의 레코드에서 다른 테이블의 레코드를 참조하기 위해 이용된다.

2교시
10:45
    - 복합 키로 기본 키를 지정( = 슈퍼 키) :
        반드시 테이블 레벨 정의 방법 이용(컬럼 레벨 정의 방법 불가)

10:55
    CHECK 제약 조건 (값의 범위나 조건 지정)
    - 입력 값이 조건에 맞지 않으면 DB에서 받지 않는다. 오류
    - 입력 값의 범위를 지정 할 수 있다.
    - 입력할 수 있는 값의 범위를 설정해 줌
    - 정식 형식:
    컬럼명 자료형 CONSTRAINT [제약조건명] [제약조건유형](범위)
    예: DNO NUMBER(4) CONSTRAINT DEPT_DNO_CK CHECK (DNO BETWEEN 1000 AND 9999)
    - 단축형식:
    컬럼명 자료형 [제약조건유형] (범위)
    예: DNO NUMBER(4) CHECK (DNO BETWEEN 1000 AND 9999)
    ** 범위에는 WHERE절의 연산자 사용 가능

11:20
    제약조건 기술 순서는 상관없다.
    단, default 조건인 경우만 가장 맨 처음에 기술해야 한다.

3교시
11:35
    도메인 무결성(domain integrity) :
    열에 대한 데이터 무결성을 보장하기 위한 것으로 컬럼의 값이 널 값을 허용하지 않거나, 데이터 타입이 적절한지, 올바른 형식의 데이터가 저장되었는지 등을 확인하는 것이다.

    자료형, 체크(CHECK), 디폴트(DEFAULT), NOT NULL 등의 제약(constraints)들로 이러한 도메인 무결성을 보장할 수 있다.
    예를 들어, 생일 날짜 컬럼에 알파벳이 입력되는 경우 도메인 무결성을 위반하는 것이라 볼 수 있다.

    * 도메인 : 속성(Column) 하나가 가질 수 있는 모든 값의 집합.
    (대표적 : 자료형, DEFAULT 조건, CHECK 조건)

    검사 순서 : 자료형 -> 값의 유효성 -> 중복값

11:45
    * FOREIGN KEY (참조키, 외래키) 제약 조건 :
    부모자식관계( = 주종관계)가 존재하는 제약조건
    부모테이블에서 기본키로 설정된 컬럼을 자식테이블에서 참조하여 사용하는 조건
    - 부모테이블의 기본키에 존재하는 값만 사용가능하며, 단, 중복값을 허용한다.
    - null값도 허용 가능하다.
    - 식별관계(강한 결합) : 부모의 기본키를 자식테이블에서도 기본키로 사용하는 경우 (1:1)
    - 비식별관계(약한 결합) : 부모의 기본키를 자식의 일반컬럼으로 사용하는 경우 (1:n)

    부모테이블 : 컬럼들...
    자식테이블 : 컬럼들...

    부모테이블 (과목테이블)
    과목코드 : 기본키
    과목명
    교수명

    과목코드    과목명  교수명
    C01         국어    고길동
    C02         영어    마이콜
    C03         수학    도우너
    C04         과학    둘리
    C05         미술    또치

    자식테이블(수강테이블)
    수강번호 : 기본키
    학번
    이름
    과목코드 : 외래키
    과목명

    수강번호    학번    이름    과목코드    과목명
    1           001     윤여완  C01         국어
    2           001     윤여완  C02         영어
    ...
    5           002     손동진  C01         국어

12:05
    FOREIGN(외래키 형식) :
    단축형식 : REFERENCES 제약조건유형 부모테이블명(부모테이블기본키명)

    정식형식 : CONSTRAINT 제약조건이름 FOREIGN KEY(자식테이블의컬럼명) REFERENCES 부모테이블명(부모테이블기본키명)

4교시
12:40
    참조 무결성(Referential integrity)
    참조 관계에 있는 두 테이블의 데이터가 항상 일관된 값을 갖도록 유지되는 것을 말한다.
    외래키와 관견있는 무결성.
    외래키 값은 NULL이거나 참조 릴레이션( = 부모테이블)의 기본키 값과 동일해야함.
    즉 릴레이션( = 테이블)은 참조할 수 없는 외래키 값을 가질 수 없다.
    (대표적 : FK (외래키, 참조키))

12:55
    참조관계의 테이블을 삭제하는 방법:
    1. 자식 테이블을 삭제한 뒤, 부모 테이블을 삭제한다.
    2. 부모테이블을 먼저 제거하는 경우는 부모, 자식간의 상관관계를 끊어주면 삭제 가능하다.
    부모, 자식간의 상관관계를 끊어주는 명령문: CASCADE CONTRAINTS

13:00
    참조관계의 테이블에 새로운 데이터를 입력하는 방법
    1. 부모 테이블에 먼저 데이터를 추가한다.
    2. 자식 테이블에 데이터를 추가할 수 있다.

13:00
    DEFAULT 조건 :
    해당 컬럼에 아무런 값도 입력되지 않은 경우 기본으로 적용되는 값
    제약조건의 맨 처음에 기술해야 한다.
    단축형식으로만 지정 가능하다.
    컬럼레벨 방식으로만 지정 가능하다.

    형식예: 컬럼명 자료형 DEFAULT 값 [제약조건들...]

13:15
    제약조건 추가, 변경, 삭제

    추가 형식 :
    ALTER TABLE 테이블명
    ADD CONSTRAINT 제약조건명 제약조건유형(컬럼명);

    변경 형식 :
    ALTER TABLE 테이블명
    MODIFY (컬럼명 [자료형] 제약조건명);

    삭제 형식 :
    ALTER TABLE 테이블명
    DROP CONSTRAINT 제약조건명;

5교시
14:50
    ** 권장사항 : 이름은 명시적으로 지어주는 것이 좋다.
    테이블명 명명규칙
    --------------------------------
    1. 테이블명은 문자로 시작해야한다.(한글포함)
    2. 테이블명은 128Byte 이하 작성가능하다.
    3. 테이블명은 문자(한글포함), 숫자, 특수문자($, _, #)까지만 사용가능하다.
    4. SQL 키워드는 테이블명으로 사용할 수 없다. (예: SELECT, INSERT, FROM 등등)
    5. 테이블 이름은 대소문자를 가리지 않는다.(단, 큰 따옴표를 묶어 처리하는 경우 대소문자를 가림)
    6. 동일한 계정내에서는 동일한 이름의 객체가 존재하는 경우 테이블명으로 사용할 수 없다. (테이블, 뷰, 함수, 프로시저 등)

    - 권장 :
    되도록 테이블명이나 컬럼명은 영어로 기재할 것
    되도록 대소문자를 가리지 않도록 명명해줄 것

    컬럼 명명규칙
    --------------------------------
    1. 컬럼명은 문자로 시작해야한다.(한글포함)
    2. 컬럼명은 문자(한글포함), 숫자, 특수문자($, _, #)까지만 사용가능하다.
    3. SQL 키워드는 컬럼명으로 사용할 수 없다.
    4. 한 테이블 내에서 동일한 이름으로 지정할 수 없다.

    ** 큰따옴표를 묶어 지정하는 경우는 테이블명 컬럼명 모두 큰 따옴표로 묶어야하며, DML, DDL, DCL 등을 처리할 때도 반드시 큰따옴표로 묶어서 기술해야한다.

15:10
    /* 트랜잭션(Transaction)
    - 데이터베이스에서 데이터를 처리하는 하나의 논리적인 작업 단위를 의미
    - 데이터를 처리하기 위한 작업(삽입(INSERT), 변경(UPDATE), 삭제(DELETE) = DML)들을 모아서 한꺼번에 처리하는 것을 트랜잭션

    - COMMIT
      저장되지 않은 모든 데이터를 데이터베이스에 저장하고, 현재의 트랜잭션을 종료하는 명령. 즉, 정상 처리되어 확정한다는 것.
      Transaction(INSERT, UPDATE, DELETE) 작업 내용을 DB에 저장.

    - SAVEPOINT ( = CHECKPOINT라고도 함.)
      현재까지의 트랜잭션을 특정 이름으로 지정하는 명령.

    - ROLLBACK
      저장되지 않은 모든 데이터 변경 사항을 취소하고, 현재의 트랜잭션을 끝내라는 명령.
      Transaction(INSERT, UPDATE, DELETE) 작업 내용을 취소.

    - 자동 COMMIT과 자동 ROLLBACK이 되는 경우
      SQL* PLUS 정상 종료는 자동 COMMIT, 비정상 종료는 자동 ROLLBACK
      DDL과 DCL 명령문이 수행된 경우 자동 COMMIT
    */

6교시
15:45   
    딕셔너리 파일명 관련 메모...
    [DBA_, ALL_, USER_]

15:55
    트랜잭션 ACID 조건
    https://cloudedi.tistory.com/entry/트랜잭션Transaction과-ACID-특성

7교시
16:45
    SUB QUERY( = 서브쿼리) :
    1. 서브 쿼리는 하나의 SQL문 안에 포함된 또 하나의 SELECT 문을 의미함.
    2. 서브 쿼리를 포함하고 있는 쿼리를 메인 쿼리, 포함된 또 하나의 쿼리를 서브 쿼리라 한다.
    3. 서브 쿼리는 비교 연산자의 오른쪽에 기술해야 하고 반드시 괄호로 묶어야 한다.
    (예외, INSERT ALL INTO문의 SELECT절, CREATE문에 쓰이는 SELECT절)
    4. 서브 쿼리는 메인 쿼리가 실행되기 이전에 한 번만 실행이 된다.

16:50
    서브 쿼리를 기술할 수 있는 곳
    SELECT 명령문의 SELECT절()
    SELECT 명령문의 FROM절()
    SELECT 명령문의 WHERE절()
    INSERT 명령문 뒤에 올 수 있다.
    CREATE 명령문 뒤에 올 수 있다.
    UPDATE의 SET절의 값으로도 올 수 있다.()

16:55
    ** 단일 행, 단일 컬럼 서브 쿼리 (Single Row)
    - 오직 하나의 ROW(줄)만을 반환
    - 단일 행 비교 연산자(=, >, >=, <, <=, <>)를 사용