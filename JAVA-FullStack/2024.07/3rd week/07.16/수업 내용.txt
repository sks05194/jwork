※ 시간의 순서에 따라 기술되었습니다.

2교시
11:00
    Statement와 PreparedStatement 객체
    => sql 명령문을 담고 실행할 수 있는 객체, 처리 결과를 담아오는 객체

    Statement와 PreparedStatement의 차이
    - Statement (정적쿼리) : SQL 명령문을 실행할 때 담는다.
    Statement st = conn.createStatement(); // 명령문 객체생성
    st.executeQuery("select * from emp where empno = 1;"); // SQL 명령문을 실행할 때 담는다.
    1. 단일로 사용될 때 빠른 속도를 지닌다.
    2. 쿼리에 인자를 부여할 수 없다.
    예) select * from emp where empno = 1;
    3. 매번 컴파일을 수행해야 한다.
    4. 쿼리문에 값이 미리 입력되어 있어야 한다.

    - PreparedStatement (동적쿼리) : SQL 명령문을 명령령문을 객체를 생성할 때 담는다.
    PreparedStatement ps = conn.prepareStatement("select * from emp where empno = ?");
    ps.setInt(1, 7784);
    ps.executeQuery();
    1. 쿼리에 인자를 부여할 수 있다. (:매개인자명 또는 ? )
    예) select * from emp where empno = :a;
    예) select * from emp where empno = ?;
    2. 처음 프리컴파일 된 후, 이후에는 컴파일을 수행하지 않는다.
    3. 여러번 수행될 때 빠른 속도를 지닌다.
    4. 쿼리문에 값이 인자로 저장된다.

3교시
11:30
    >> 클래스 선언 형식
    [접근제어자 - public, default] [기타제어자 - final, abstract] class 클래스명 {
        // 멤버필드 선언문
        [접근제어자 - ppdp] [기타제어자 - static, final] 자료형 객체명;

        // 기본생성자 선언문
        [접근제어자 - ppdp] 클래스명() {
            // 생성자호출문 => this(매개인자값); 또는 super(); super(5);
            // 출력문 => System.out.println("기본생성자");
            // 조건문 => if ~ else if ~ else문, switch문
            // 반복문 => for, while, do ~ while문
            // 지역변수(객체) 선언문 => [final] int i = 0; 또는 EMP emp = new Emp();
            // 멤버필드 초기화 문 => this.md = 5;
            // 메소드 호출문 => setMd(5);
        }
        // 기타생성자 선언문
        [접근제어자 - ppdp] 클래스명(자료형 매개변수명, ... ) {
            // 생성자호출문 => this(); 또는 super(); super(5);
            // 출력문 => System.out.println("기타생성자");
            // 조건문 => if ~ else if ~ else문, switch문
            // 반복문 => for, while, do ~ while문
            // 지역변수 선언문 => [final] int i = 0; 또는 EMP emp = new Emp();
            // 멤버필드 초기화 문 => this.md = 5;
            // 메소드 호출문 => setMd(5);
        }

        // 메소드 선언문
        [접근제어자 - ppdp] [기타제어자 - static, final, abstract] 리턴타입 메소드명(자료형 매개변수명, ... ) {
            // 출력문 => System.out.println("메소드 선언문");
            // 조건문 => if ~ else if ~ else문, switch문
            // 반복문 => for, while, do ~ while문
            // 지역변수 선언문 => [final] int i = 0; 또는 EMP emp = new Emp();
            // 멤버필드 초기화 문 => this.md = 5;
            // 다른 메소드 호출문 => setMd(5);
            [ return 반환할 값; ]
        }
    }