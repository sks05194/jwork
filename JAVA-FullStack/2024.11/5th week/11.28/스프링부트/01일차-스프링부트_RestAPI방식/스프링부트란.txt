

스프링프레임워크와 스프링부트의 차이


1. 스프링 프레임워크(Spring Framework):
Java 기반의 엔터프라이즈 애플리케이션을 개발하기 위한 포괄적인 프레임워크입니다.
스프링은 의존성 주입(Dependency Injection)과 관점 지향 프로그래밍(Aspect-Oriented Programming)을 포함한 다양한 기능을 제공하여 개발자가 유연하고 모듈화된 애플리케이션을 구축할 수 있다.
스프링 프레임워크는 설정이 매우 유연하고 개발자가 필요한 기능을 선택적으로 추가할 수 있다.


2. 스프링 부트(Spring Boot):
스프링 기반의 애플리케이션을 빠르고 쉽게 구축하기 위한 프레임워크입니다.
기본 설정을 자동화하여 개발자가 빠르게 애플리케이션을 개발하고 실행할 수 있다.
내장된 톰캣(Tomcat) 서버와 같은 기본 설정들을 제공하여 개발자가 별도의 설정 없이도 웹 애플리케이션을 쉽게 실행할 수 있다.


========================================================


★스프링부트란
- 웹 프로그램을 쉽고 빠르게 만들 수 있도록 도와주는 자바 기반의 웹 프레임워크
- 톰캣과 같은 WAS(Web Application Server)가 내장되어 있다.
- 설정이 편하고 쉬우며, 쿠키나 세션 처리, 로그인/로그아웃 처리, 권한 처리, 데이터베이스 처리 등 
	웹 프로그램을 위해 만들어야 할 기능이 미리 구현되어 있다.
- 보안이 뛰어나다. 
	- SQL 인젝션은 악의적인 SQL을 주입하여 공격하는 방법이다.
	- XSS(cross-site scripting)는 자바스크립트를 삽입해 공격하는 방법이다.
	- CSRF(cross-site request forgery)는 위조된 요청을 보내는 공격 방법이다.
	- 클릭재킹(clickjacking)은 사용자의 의도하지 않은 클릭을 유도하는 공격 방법이다.



★빌드관리도구 : Maven과 Gradle
- 빌드란 소스코드 파일을 실행 가능한 소프트웨어 산출물로 만드는 과정을 말한다.
Maven란 XML기반으로 자바라이브러리를 관리하는 빌드관리도구임.
=> pom.xml
Gradle란 JSON기반으로 자바라이브러리를 관리하는 빌드관리도구임.
=> bundle.gradle


========================================================
main 폴더: 실제 코드를 작성하는 공간
--> resources : 
	--> .properties파일들
	--> static : .css, .js, img 파일들... (정적 리소스들)
	--> templates : .html파일들
	--> java : 패키지들, .java파일들
클래스, 리소스파일들 모두 기술되는 공간임

test 폴더 : 프로젝트의 소스 코드에 대해 단위 테스트를 진행할 경우 사용하는 공간

========================================================
build.gradle : Maven의 pom.xml과 동일함.

Gradle의 형상관리 파일임.
repositories {
	//메이븐 레포지토리에서 다운로드 하도록 설정
	mavenCentral()
}

dependencies {
//다운로드할 라이브러리 명세 기술

}


settings.gradle : 빌드할 프로젝트의 정보를 설정하는 파일.

========================================================


★ 부트 설정파일 : application.properties
- server설정, database설정, 인코딩설정 등
참고사이트: https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#application-properties.server.server.servlet.encoding.enabled


★롬복(Lombok)
- java에서 자주 사용되는 getter, setter, toString, 생성자 등의 소스 코드를 미리 구현하여 
	어노테이션을 통해 해당 소스 코드를 자동으로 생성해주는 라이브러리이다.
- 롬복은 디펜던시만 추가한다고 적용되지 않는다. 반드시 설치까지 해주어야 한다.
- 롬복설치하기
1. https://projectlombok.org/download > Download메뉴 클릭 > 1.18.36 클릭하여 다운로드
2. cmd창 열기 > cd Downloads > java -jar lombok.jar (롬복 설치)
3. Project Lombok v1.18.36 - installer창에서 IDES의 STS선택 - Install/Update클릭
4. 설치 완료되면 [Quit Installer]클릭하여 창 닫기.
참고사이트: https://projectlombok.org/features/
@Getter @Setter @ToString @RequiredArgsConstructor
(= @Data)
@NoArgsConstructor @AllArgsConstructor 
@Builder (빌더패턴 사용가능)


★스프링부트 프로젝트 생성하기. (JDBC)
1. New - Spring Starter Project 선택
2. 프로젝트 기본 설정
Service Url : https://start.spring.io
Name : 프로젝트명 입력(예: first)
[v] Use default location 체크
Type : gradle 선택
Package : jar 선택 (war : jsp를 사용하여 webapp폴더를 생성해야하는 경우 / jar : webapp폴더를 생성하지 않는 경우)
Java version : 17
Language : Java
Group : kr.co
Artifact : 프로젝트명 입력(예: first)
Version : 0.0.1-SNAPSHOT
Description : Demo project for Spring Boot(설명 입력)
Package : kr.co.biz 또는 kr.co.first 등 spring legacy project의 3단 설정패키지처럼 설정하기
Working sets의 []Add project to working sets 체크해제 후 
[Next] 클릭 
3. 프로젝트의 Dependencies 설정
Spring Boot Version : 2.7.5
-Developer Tools 
 [v] Spring Boot DevTools
 [v] Lombok
-SQL
 [v]Mybatis Framework
-Web
 [v]Spring web 선택 후
[Next ] - [Finish]
 

//나머지 필요한 라이브러리 추가하기 (Maven Repository에서 gradle버전으로)
- bundle.gradle에 추가해야하는 라이브러리
--------------------------------------------------------------------------------------------
//web프로젝트 시 필요한 라이브러리
implementation 'org.springframework.boot:spring-boot-starter-web'
//스프링부트 프로젝트 시 필요한 라이브러리
implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.2.2'
//webapp구동 시 필요한 라이브러리(servlet필요) : jsp사용시 
implementation 'org.apache.tomcat.embed:tomcat-embed-jasper'
//jstl사용 시 필요한 라이브러리
implementation 'javax.servlet:jstl'
//mariadb시 필요한 라이브러리
implementation group: 'org.mariadb.jdbc', name: 'mariadb-java-client', version: '2.7.3'
//롬복 사용 시 필요한 라이브러리
compileOnly 'org.projectlombok:lombok'
annotationProcessor 'org.projectlombok:lombok'
developmentOnly 'org.springframework.boot:spring-boot-devtools'
testImplementation 'org.springframework.boot:spring-boot-starter-test'
--------------------------------------------------------------------------------------------
**dependency 변경후에는 반드시 프로젝트에서 마우스 우버튼 클릭하면 나오는 메뉴에서
Gradle > Refresh Gradle Project를 해주어야 라이브러리가 정상적으로 변경되어 적용되어진다.


--------------------------------------------------------------------------------------------
implementation	애플리케이션 빌드 및 실행 시 모두 포함되는 의존성
compileOnly	컴파일 시에는 필요하지만, 런타임에는 포함되지 않는 의존성
developmentOnly	개발 시에만 필요한 의존성 (예: 개발 도구)
runtimeOnly	런타임 시에만 필요한 의존성
annotationProcessor	컴파일 타임에 애노테이션을 처리하는 의존성
providedRuntime	런타임에서 제공될 의존성 (배포 환경에서 이미 제공되는 의존성)
testImplementation	테스트 코드에서만 필요한 의존성
testRuntimeOnly	테스트 실행 시에만 필요한 런타임 의존성
--------------------------------------------------------------------------------------------


--------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------
- application.properties파일 설정
#server config
server.port=8090
server.servlet.context-path=/

#view resolver config
spring.mvc.view.prefix=/WEB-INF/views/
spring.mvc.view.suffix=.jsp

#encoding config (http request/response 인코딩 설정)
server.servlet.encoding.charset=UTF-8
server.servlet.encoding.force=true
server.servlet.encoding.enabled=true

#encoding config preVersion (이전 http request/response 인코딩 설정방법)
#spring.http.encoding.enabled=true
#spring.http.encoding.force=true
#spring.http.encoding.charset=UTF-8

# DB config (데이터베이스 설정)
spring.datasource.url=jdbc:mariadb://localhost:3306/samp
spring.datasource.driverClassName=org.mariadb.jdbc.Driver
spring.datasource.username=root
spring.datasource.password=1111

--------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------

스프링부트 프로젝트 빌드 방법
C:\bwork\first 폴더까지 이동. gitBash나 PowerShell 을 이용하여 ./gradlew build 명령 실행

$ ./gradlew build
=> 실행할 수 있는 실행 파일(.war)로 저장됨(경로:  C:\bwork\first\build\libs\first-0.0.1-SNAPSHOT.war)

스프링부트 빌드파일 배포(실행)하기
C:\bwork\first\build\libs 폴더까지 이동. cmd를 이용하여 명령 실행
java -jar first-0.0.1-SNAPSHOT.war
=> 브라우저에서 localhost:8090으로 접근하면 됨.
