영속성(Persistence)이란 :
데이터를 프로그램이 종료되더라도 유지될 수 있도록 저장하는 것을 의미한다. 
데이터의 수명 확장,  데이터를 장기적으로 활용할 수 있게 해 준다.



JPA 와 하이버 네이트의 역할 
1. JPA ( Java Persistence API ) : 
자바 객체 와 데이터베이스 를 연결해 데이터 를 관리한다 . 
객체 지향 도메인 모델과 데이터베이스의 다리 역할을 함.

2. 하이버 네이트 ( Hibernate ) : 
JPA 의 인터페이스를 구현 한다 . 
내부적으로는 JDBC API를 사용한다 . 


★★★ JPA는 인터페이스로 제공되므로, 실제로 JPA의 기능을 구현하는 구현체가 필요하다. 가장 널리 사용되는 JPA 구현체는 Hibernate임. 
=========================================================================================

JPA사용하기 위한 방법
1. build.gradle의 dependencies에 라이브러리명세 추가하기 : 
//mariadb 사용 시 필요한 라이브러리
implementation group: 'org.mariadb.jdbc', name: 'mariadb-java-client', version: '버전값x.x.x'
// Oracle JDBC 드라이버 추가
compile group: 'com.oracle.database.jdbc', name: 'ojdbc11', version: '버전값x.x.x.x'

//jpa 사용 시 필요한 라이브러리
implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

2. application.properties 파일에 데이터베이스 연결설정과 JPA를 사용하기 위한 하버네이트 설정을 한다.

# 오라클 데이터베이스 연결 설정
spring.datasource.url=jdbc:oracle:thin:@ip주소나 호스트명입력:1521:데이터베이스명
spring.datasource.username=사용자계정명입력
spring.datasource.password=비밀번호입력
spring.datasource.driver-class-name=oracle.jdbc.OracleDriver

# Hibernate 설정 (oracle 11g인 경우)
spring.jpa.database-platform=org.hibernate.dialect.Oracle11gDialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.show-sql=true

# mariaDB 데이터베이스 연결 설정
spring.datasource.url=jdbc:mariadb://ip주소나 호스트명입력:3306/데이터베이스명
spring.datasource.driverClassName=org.mariadb.jdbc.Driver
spring.datasource.username=계정명
spring.datasource.password=비번

# Hibernate 설정 (mariaDB인 경우)
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MariaDBDialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.show_sql=true

**show_sql=true 옵션 : Hibernate가 생성하는 SQL 쿼리를 로그에 출력할지 여부를 제어
**format_sql=true : sql출력을 보기 좋은 형식으로 맞춰서 출력
**ddl-auto : Hibernate에게 데이터베이스 스키마를 자동으로 생성하거나 갱신할지 여부를 설정. update 값은 애플리케이션을 다시 시작할 때마다 변경된 엔티티를 기반으로 데이터베이스 스키마를 업데이트한다는 의미임.



롬복에서 제공하는 어노테이션 
@NoArgsConstructor : 기본생성자 생성
@AllArgsConstructor : 멤버필드를 모두 가지고 있는 생성자 생성
@Getter
@Setter
@ToString
@Entity
@Data :게터(Getter), 세터(Setter), toString(), equals(), hashCode() 메서드 등을 생성해주는 기능을 제공
@Builder : 빌더패턴으로 객체를 생성할 수 있도록 해주는 어노테이션
@GeneratedValue(strategy = GenerationType.IDENTITY) :기본키를 자동으로 1씩 증가 


javax persistence에서 제공하는 어노테이션 => 버전업되어 jakarta persistence로 변경됨.
@Entity : 해당 클래스를 테이블하고 매핑한다고 JPA에게 알려주는 어노테이션
@Table : 엔티티클래스에 매핑할 테이블 정보를 알려줌. 해당 테이블과 이름이 동일한 경우 지정하지 않아도 됨.
클래스와 테이블명칭이 다른 경우는 사용해주는 것이 좋다. 예시:  @Table(name="BOARD")
@Id : 해당 테이블의 primary key인 컬럼을 명시해주는 어노테이션
@Column : 해당 테이블의 컬럼에 대한 맵핑/설정등을 처리하는 어노테이션
-옵션 종류 
name : 컬럼명과 필드명이 다를 경우 사용
length : 문자열 길이를 지정
columnDefinition = "TEXT" => 해당 필드를 텍스트 데이터를 저장할 수 있는 컬럼으로 매핑하도록 지정하는 옵션. 문자열 데이터가 일반적인 길이 제한 없이 저장되도록 할 수 있다.

 
@GeneratedValue(strategy = GenerationType.IDENTITY) : 
테이블에 auto_increment처리나 시퀀스를 작동시켜서 1개씩 증가할수 있도록 처리해주는 어노테이션임.
반드시 한 개씩 증가할 수 있는 조건이 테이블에 적용되어 있어야만 한다.


