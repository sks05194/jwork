※ 시간의 순서에 따라 기술되었습니다. 일부 코드와 내용은 Notion에 기술되어 있습니다.
※ 일부 내용은 시간의 순서가 무시되었습니다.

2교시
10:55	싱글톤 패턴(SingleTon) : 
	객체를 한 개만 생성할 수 있도록 강제하는 패턴
	- 생성자의 접근제어자는 private이어야 한다.
	- private static으로 선언된 나의 자료형으로 선언된 객체가 멤버필드로 존재해야 한다.
	- 반드시 객체를 반환해주는 메소드에 static 제어자가 존재해야 한다.
	//이하 변경 이전 설명
	- 객체 생성을 필요로 하는 곳에 나의 객체를 돌려주기 위해 나의 자료형으로 멤버필드에 객체 선언이 되어 있어야 한다.
	반드시 접근제어자가 private이어야 한다.
	- 반드시 객체를 반환해주는 메소드에 static 제어자가 존재해야 한다.

3교시
12:00	상속(inheritance) : 부모클래스의 속성, 기능들을 자식클래스가 물려받아서 사용할 수 있는, 구체화 할 수 있는 것을 의미한다.
	- 확장(클래스간 상속) : 부모클래스와 자식클래스의 기능을 모두 사용할 수 있다. = 기능 업그레이드
	- 일반화(구체화) (인터페이스) : 부모클래스의 메소드의 기능을 다른 방식으로 재정의하거나 구체화(자세하게 만드는 것)할 수 있다. = 기능 체인지 용이


4교시
12:35	상속
	- 클래스급 이상에서는 상속관계에서만 형변환이 가능하다.
	- 인터페이스는 클래스를 상속받을 수 없다.
	- 반드시 부모와 자식이라는 관계가 존재해야 한다.
	부모 : 상위, 기본, Super
	자식 : 하위, 파생, Sub
	- 부모는 자식을 받을 수 있다. 자식은 부모를 받을 수 없다.
	- 클래스는 다중 상속이 되지 않는다.
	- 인터페이스는 다중 상속이 가능하다.

	상속 형식
	- 동급의 자료형인 경우 형식
	(클래스 == 추상클래스 != 인터페이스)
	부모 = 클래스, 자식 = 클래스 : 동급
	[접근제어자] class 자식클래스 extends 부모클래스 { }
	[접근제어자] class 자식클래스 extends 부모추상클래스 { }
	[접근제어자] class 자식인터페이스 extends 부모인터페이스 { }
	[접근제어자] class 자식추상클래스 extends 부모추상클래스 { }

	- 동급이 아닌 자료형인 경우 형식
	(클래스 == 추상클래스 != 인터페이스)
	[접근제어자] class 자식클래스 implements 부모인터페이스 { }
	[접근제어자] class 자식추상클래스 implements 부모인터페이스 { }

12:55	Object : 자바의 최상위 부모(조상)클래스, 자동상속이 이루어지는 자료형임.

	Override or Overriding(재정의 = 덮어씌우기)
	: 부모, 자식간의 관계가 존재하는 클래스들이면서, 부모 안에 들어있는 메소드를 자식 클래스에서 새롭게 다시 정의하거나 구체화하는 방식을 오버라이드, 오버라이딩이라고 한다.

	어노테이션 : 특수한 기능을 품고 있는 주석
	형식 : @어노테이션명
	- 생략 가능한 어노테이션 : 해당 내용에 대해 설명만 하는 기능만 있는 어노테이션들(예: @Override)
	- 생략 불가능한 어노테이션 : 어떠한 기능을 코드에 수행할 수 있도록 도움을 주는 어노테이션들(예: @WebFilter ...)

	상속을 사용하는 이유 : 형변환 용이, 다형성(polymorphizm), 보안
	** 다형성(polymorphizm) : 한 개의 객체가 여러 개의 자료형을 가지고 있는 것을 말함.
	대표자료형, 숨겨있는 자료형(Object)



8교시
17:50	Parent p = Child() 케이스
	멤버필드는 Parent 자료형의 것만 접근 가능
	메소드
	- 동일한 이름인 경우 : Child 자료형만 접근 가능
	- 동일한 이름이 아닌 경우 : Parent 자료형만 접근 가능

	Child c = Child() 케이스
	이름이 다른 멤버필드와 메소드는 Parent, Child 모두 접근 가능
	이름이 같은 멤버필드, 메소드 : Child 자료형만 접근 가능


금요일 시험문제
1. 메소드 오버로딩 조건
2. 숨어있는 디폴트 생성자 형식
3. 출력문을 보고 코드 작성하기(입력한 년도에 따라 출력일수 다르게 하기)
------------------------------
2024년
1월31일
2월29일
3월31일
4월30일
...
12월31일
------------------------------
4. 2단~9단까지 구구단 출력문 작성
------------------------------
2 * 1 = 2
2 * 2 = 4
...
9 * 9 = 81
------------------------------
5. 오버라이딩이란 : 부모클래스에 존재하는 메소드를 자식클래스에 새롭게 재정의 하거나 구체화하는 방식