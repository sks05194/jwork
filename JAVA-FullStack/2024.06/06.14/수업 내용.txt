※시간의 순서에 따라 기술되었습니다.

1교시
09:30	메서드 선언문 형식
	public static 리턴타입 메소드명( 매개변수 선언문들, ... ) { // public static, 매개변수 선언문들 생략 가능
		// 실행코드들;
		// ...
		return 돌려줘야하는_값; // 생략 가능
	}

	리턴타입 : return문에서 돌려줘야하는 값의 자료형과 일치시켜야 한다.
	예) return "하하하"; // 리턴타입 : String
	예) return 50; // 리턴타입 : int
	** 만약 return해야하는 값이 존재하지 않는 경우 리턴타입은 void로 기술해야 한다.

	메소드 호출문 : 메소드를 실행시키거나 메소드를 실행 후 리턴값을 담는 공간
	형식 : 객체명.메소드이름( 매개인자 ); // 객체명, 매개인자 생략 가능
	형식 : 클래스명.메소드이름( 매개인자 ); // 클래스명, 매개인자 생략 가능

10:05	매개변수(Parameter Variable) : 메소드 호출문에서 보내준 값(매개인자 = Argument Value)을 받아서 담아놓는 역할을 하는 변수임.
	매개인자(Argument Value) : 메소드를 호출할 때 호출문의 소괄호 안에 담아서 보내는 값을 의미함.

2교시
3교시
11:30	System.out.println 단축키 : "syso" 입력 후 Ctrl + Space



4교시
12:40	프로젝트 백업하는 방법



12:45	메소드 오버로딩(Method Overloading)
	: 이름이 동일한 메소드가 여러개 선언되어 있는 것을 메소드 오버로딩이라고 한다.

	오버로딩 조건
	- 반드시 메소드 이름이 동일해야 한다.
	- 반드시 매개변수의 갯수가 달라야 한다.
	- 반드시 매개변수의 자료형이 달라야 한다.
	- 반드시 매개변수의 갯수가 일치하는 경우 자료형의 위치가 달라야 한다.

5교시
14:40	클래스란
	- 여러 자료형의 데이터를 한꺼번에 담을 수 있는 최소한의 단위
	- 속성(멤버변수, 필드, Attribute, Property, 컬럼(Column, 데이터베이스에서 한정))들과 기능(=어떠한 행위들을 수행할 수 있는 메소드들, 생성자, 초기화블럭)들을 묶어놓은 집합체
	- 속성 : 변수, 상수, 객체의 선언문 또는 선언 동시에 초기화까지 진행
	- 기능 : 메소드, 생성자, 초기화블럭

	클래스 선언 형식
	public class 클래스명 { // public 생략 가능
		// 속성들; // 변수, 상수, 객체의 선언문
		접근제어자 기타제어자 자료형 변수명 = 값; // 멤버 변수, 전역변수, 인스턴스 변수
							// 접근제어자, 기타제어자 생략 가능
		
		//기능들
		생성자들.. // 생성자 선언문

		// 메소드들.. // 메소드 선언문
		접근제어자 기타제어자 리턴타입 메소드명( 매개변수자료형 변수명, ...  ) { // 접근제어자, 기타제어자, 매개변수 생략 가능
			실행코드들..; // 조건문, 반복문, 출력문, 변수 대입문(재할당문), 메소드 호출문
			// 지역변수 선언 또는 지역상수 선언문

			return 돌려줄_값; // 리턴타입이 void일 경우 생략
		}

		초기화블록
	}

	참조자료형으로 만드는 모든 전역 변수의 자동초기화는 null값을 갖는다.
	지역변수를 선언할때 final을 제외한 기타제어자나 모든 접근제어자를 붙일 수 없다.


6교시
7교시
16:40	- 메인클래스 : 메인 메소드를 가지고 있는 클래스
	- 일반클래스 : 메인 메소드를 가지고 있지 않은 클래스



8교시





