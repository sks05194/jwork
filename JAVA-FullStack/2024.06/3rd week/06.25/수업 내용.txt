※ 시간의 순서에 따라 기술되었습니다.

1교시
09:30   제네릭타입 (Generic Type) : 자료형을 보편화(=일반화)하는 형식의 자료형 방식

    [접근제어자] [기타제어자] class 클래스명<타입변수> {
        [접근제어자] [기타제어자] 타입변수 변수명;
        [접근제어자] [기타제어자] 타입변수 메소드명( ... ){ ... }
    }


2교시
10:45   Getter, Setter
    POJO : Plain Old(Oriented) Java Object(순수한 옛방식의, 기존방식을 지킨 자바 객체)

    - 멤버필드를 선언하는 경우 명명규칙에 맞춰서 private로 선언한다.
    - 멤버필드를 간접접근 할 수 있는 public getter, setter 메소드가 존재해야 한다.
    - POJO 객체가 가지고 있는 getter, setter의 형식(기본 틀)
    - setter 형식 (멤버필드의 값을 초기화 시키는 역할을 수행하는 메소드)
        public void set멤버필드명 (멤버필드의_자료형 멤버필드명) {  // 메소드 이름 카멜기법으로 작성
            this.멤버필드명 = 매개변수로 사용한 멤버필드명;
        }
    - getter 형식 : 정보은닉된 멤버필드의 값을 외부에서 간접적으로 얻어다 쓰기 위해 만들어놓은 메소드
        public 멤버필드의자료형으로리턴타입설정 get카멜기법의멤버필드명() {
            return 멤버필드명;
        }

        예:
        // 멤버필드
        private int age;

        // setter
        public void setAge(int age){
            this.age;
        }

        // getter
        public int getAge() {
            return age;
        }

11:15   타입변수명 권장사항
    명명규칙 : 
    되도록 정해놓은 변수명 이용,
    클래스급 이상의 자료형만 받을 수 있으므로 대문자로 기술
    한 글자의 대문자로만 기술
    T : Type
    M : Model
    E : Element
    K : Key
    V : Value 

3교시
12:05   제네릭 메소드 선언 형식
   	[접근제어자] [기타제어자] <제네릭타입변수> 리턴타입[<제네릭타입변수>] 메소드명(제네릭타입변수명 매개변수명) {
		// Do Somethings...
	}


5교시
15:40 단축키 Ctrl + Shift + o : import 못한거 바로 하게 만들기