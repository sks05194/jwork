※ 대부분 시간의 순서에 따라 기술되었습니다.

2교시
11:05	abstract(추상적인) : 기타 제어자 => 클래스, 메소드
	[접근제어자] [기타제어자] 리턴타입 메소드명( [ 매개변수들 선언문, ... ] ) {
		// Do Somethings...
	}
	{ } : 메소드의 몸체, 구현부
	[접근제어자] abstract 리턴타입 메소드명( [ 매개변수들 선언문, ... ] );
	반드시 상속받는 자식에게서 구현(Override) 해주어야 한다.

	추상클래스란 : 클래스 선언 시 abstract 제어자를 포함하고 있으면서, 반드시 추상메소드(abstract)를 한 개 이상은 가지고 있어야하는 클래스를 추상 클래스라고 한다.
	추상클래스는 객체 생성을 할 수 없다.
	(단, 자식클래스를 통해 객체 생성이 가능하다.)
	생성자, 멤버필드, 일반 메소드 전부 선언 가능하다.

	// 추상 클래스
	[접근제어자] abstract class 클래스명 {
		// 1개 이상 존재해야 함. 접근제어자로 private가 올 수 없다.
		[접근제어자] abstract 리턴타입 메소드명( [ 매개변수들 선언문, ... ] );
	}



3교시
11:35	// 추상 클래스를 상속받은 자식 클래스
	[접근제어자] class 클래스명 extends 부모추상클래스명 {
		// 부모 추상 클래스에서 선언된 추상메소드는 반드시 전부 선언되어야 한다.
		[접근제어자] 리턴타입 부모추상메소드명( [ 매개변수들 선언문, ... ] ) {
			// Do Something...
		}
	}



4교시
12:55	인터페이스란 : 
	몸체가 없는 메소드들(abstract)과 정적 상수만 가질 수 있는 추상적인 묶음
	(자바 1.8 이상) public default 메소드, private(상속 안 되는) 메소드, static 메소드는 몸체를 가질 수 있고, 상속여부를 지정할 수 있다.
	무조건 상속을 위해서 나온 대상임.
	- 형변환을 쉽게 하기 위해(기능을 쉽게 변환해서 사용 가능함)
	- 보안을 강화하기 위해(코드의 직접 접근을 막을 수 있다.)
	- 형식을 일치시키기 위해(동일한 형식으로 유지시키기 위해 => 차후 유지 보수 하는 경우 발생되는 에러를 줄일 수 있다.)
	- 인터페이스는 객체 생성불가(상속자식클래스로 객체 생성 가능)

	멤버필드의 자동 접근제어자와 기타제어자 : 
	[ public static final ] 자료형 필드명 = 값; // [] : 자동생성됨
	[ public abstract ] 리턴타입 메소드명( [ 매개변수 선언문, ... ] );

	형식:
	[접근제어자] [기타제어자] interface 인터페이스명 {
		// 멤버 정적상수 선언문들;
		// 추상 메소드들;

		default 리턴타입 메소드명( [매개변수 선언문, ... ] ) { /* Do Somethings... */ }
	}

7교시
16:55	final : ~할 수 없는, 금지하는
	- 멤버필드나 지역 변수 앞에 붙는 경우 : "상수"의 의미임
	- 메소드 선언문에 붙는 경우 : "재정의 할 수 없는"
	- 클래스 선언문에 붙는 경우 : "상속할 수 없는"

	클래스에 붙일 수 있는 제어자들(접근제어자, 기타제어자)
	- 접근제어자 : public, default
	- 기타제어자 : final, abstract

	메소드에 붙일 수 있는 제어자들
	- 접근제어자 : public, protected, default, private
	- 기타제어자 : abstract, static, final

	멤버필드에 붙일 수 있는 제어자들
	- 접근제어자 : public, protected, default, private
	- 기타제어자 : static, final

	생성자에 붙일 수 있는 제어자들
	- 접근제어자 : public, protected, default, private
	- 기타제어자 : 없음

	초기화 블록 : static만 가능.(static 제어자를 붙이거나, 붙이지 않거나만 가능)

강사님의 자바 책 추천
혼자 공부하는 자바, 이것이 자바다, 자바의 정석, bing 자바