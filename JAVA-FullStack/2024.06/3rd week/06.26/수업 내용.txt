

1교시
09:35   Collection Framework 종류와 형식

    Collection 인터페이스를 상속받은 자식 interface : List, Set
    Iterator 인터페이스를 상속받은 자식 interface : Map

    List 인터페이스를 상속받은 자식 클래스 : ArrayList
    순서가 있다. (인덱스 존재, 중복값 허용)
    형식 : 
    List<자료형> 객체명 = new ArrayList<자료형>();
    List<자료형> 객체명 = Arrays.asList([값1, 값2, 값3, ...]);
    값추가 :
    add(추가할 값)메소드 : 마지막에 값을 추가한다.
    add(인덱스번호, 추가할 값) : 해당 인덱스에 값을 추가하고 기존의 인덱스번호부터~마지막 인덱스까지 한 칸씩 뒤로 미룬다.

    값삭제: (방칸수까지 제거)
    remove(인덱스번호) : 해당 인덱스의 값을 삭제한다.
    remove(값) : 처음 인덱스부터 순서대로 검색하여 처음 해당되는 값만 삭제한다.
    (중복값이 존재하는 경우는 맨 처음 값만 제거됨)

    해당값 모두 제거 : (방칸수까지 제거)
    removeAll(컬렉션프레임워크자료형객체) : 해당 자료형으로 지정해둔 값과 일치하는 값이 있으면 모두 제거함

10:05   Map
    key(키)는 중복값을 가질 수 없다.
    value(값)는 중복값을 가질 수 있다.


2교시
11:05   Iterator : 반복자 => 한 줄로 나열되어 있는 데이터를 인덱스 번호로 나열하는 것이 아닌 자신만의 방식으로 떼어서 붙여놓는 자료형


6교시
15:30   Scanner 클래스 : 데이터의 입력을 받아오는 자료형(객체 생성 시 생성자의 사용에 따라 파일을 입력 받아오는지, 콘솔창에 입력한 데이터를 받아오는지 달라짐). 입력을 무조건 공백이 포함되던, 포함이 되지 않던 한 줄 단위의 입력만 받아올 수 있다.

    - 문자열에 관련된 입력을 받는 메소드
    >> 입력이 끝났다는 것을 인식하고, 다음 값을 입력하는 것을 인식하는 기호 모두 엔터임.
    nextLine(); // 공백이 포함된 한 줄 단위의 문자열을 입력받을 수 있다.

    >> 입력이 끝났다는 것을 인식하는 기호 : 공백
    >> 다음 값을 입력하는 것을 인식하는 기호 : 엔터
    next(); // 공백이 없는 한 줄 단위의 문장을 입력받을 수 있다.(단어 단위)

    - 숫자형에 관련된 입력을 받는 메소드
    nextInt(); // 공백이 없는 정수값 단위의 값을 입력받을 수 있다.
    nextDouble(); // 공백이 없는 실수값 단위의 값을 입력받을 수 있다.