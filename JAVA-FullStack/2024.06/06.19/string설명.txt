
//Wrapper클래스
//기본자료형을 클래스 자료형화 시켜주는 클래스
//기본자료형의 특성은 그대로 유지 됨.
//첫 글자가 클래스처럼 영어대문자이며, 약어가 아닌 모든 단어를 기술함.
//기본자료형과 랩퍼클래스 간의 값은 서로 단축형식으로 받을 수 있다.
예) int a = 5;	Integer b = a; (O)
Double c = 0.5;	double d = c; (O)
단, 기본자료형은 기본자료형간의 명시적형변환, 암묵적형변환이 가능하지만,
랩퍼클래스는 서로 간의 형변환을 바로 할 수 없다.

//박싱 : 기본형 -> 클래스형
//언박싱: 클래스형 -> 기본형
/*
byte -> Byte
short -> Short
int -> Integer 
long -> Long
float -> Float
double -> Double
char -> Character
boolean -> Boolean
*/

================================

compareTo :  문자열 비교

- 문자열 비교: 값을 int로 반환. 
1. 비교대상에 문자열이 포함되어 있을 경우
(단, 첫글자부터 같은 문자열이어야 한다) : 서로의 문자열 길이의 차이값을 리턴
2. 비교대상과 전혀 다른 문자열인 경우
(단, 첫글자부터 다른 문자열인 경우도 해당)
 동일하지 않은 문자열의 시작 문자열의 아스키코드값 차를 반환
- 숫자비교 : 값을 int로 반환. 크다(1), 같다(0), 작다(-1) 

compareToIgnoreCase() : 대소문자 무시하고 비교. 모두 같은 케이스로 만들어서 비교


==============================

concat : 문자열 뒤로 추가

==============================

contains() : 문자열 포함 여부
값을 boolean자료형으로 반환함.

==============================

문자열 인덱스 indexOf

1. indexOf(문자열) : 해당 문자열의 맨 앞글자를 왼쪽에서부터 찾아서 해당 인덱스를 반환함.
2. indexOf(문자열, 인덱스번호) : 해당 문자열의 맨 앞글자를 왼쪽에서부터 찾아서 해당 인덱스를 반환하는 것은 동일함.
단, 인덱스번호를 시작지점으로 인식하여, 그 지점부터 해당 문자열의 맨 앞글자를 왼쪽에서부터 찾아서 해당 인덱스를 반환함.
3. lastIndexOf(문자열) : 해당 문자열의 맨 앞글자를 오른쪽에서 부터 찾아서 해당 인덱스를 왼쪽에서부터 세어 반환함.
4. lastIndexOf(문자열, 인덱스번호) : 해당 문자열의 맨 앞글자를 오른쪽에서 부터 찾는것은 동일함. 
단, 인덱스 번호를 앞에서 부터 세어 그 지점을 끝지점으로 인식하여, 
그 지점부터 오른쪽에서 왼쪽으로 해당 문자열의 맨 앞글자를 찾아서 해당 인덱스를 앞에서부터 세어 반환함.
5. indexOf(아스키코드값) : 아스키코드 값에 해당하는 문자를 찾아 인덱스를 반환함. 

==============================

문자열 치환 : replace , replaceAll(정규표현식 사용가능)
정규표현식 : 
컴퓨터의 정규언어에서 유래. 
특정한 규칙을 가진 문자열의 집합을 표현하기 위해 쓰이는 형식언어

사용예시: 전화번호, 주민등록번호, 이메일등과 같이 정해져있는 형식이 있고 사용자가 그 형식대로 제대로 입력했는지 검증을 해야하는 경우 정규표현식을 사용



==============================

문자열 추출: substring(0, 4) (시작인덱스번호) ~ (해당인덱스번호-1)까지

==============================

형변환 (String => )
getClass()메소드는 Object에서 상속, getName()은 Class<T>자료형에서 상속

형변환 ( => String) : valueOf() , toString()
toString(), valueOf() 메소드는 Object에서 상속받은 메소드를 재정의한 것임.

==============================

equals() : 객체의 값 비교
equals(),hashCode() 메소드는 Object에서 상속받은 메소드를 재정의한 것임.